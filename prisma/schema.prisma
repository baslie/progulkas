// Prisma schema for Маршруты Прогулки
// Provider: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  roles         UserRole[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String? @db.Text
  oauth_token        String? @db.Text
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  users UserRole[]
}

model UserRole {
  userId     String
  roleId     Int
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

enum RouteDifficulty {
  EASY
  MODERATE
  CHALLENGING
}

enum RouteAudience {
  WALK
  RUN
  FAMILY
  BIKE
  STROLLER
}

model Route {
  id              String           @id @default(cuid())
  slug            String           @unique
  title           String
  summary         String
  city            String
  region          String
  difficulty      RouteDifficulty
  distanceKm      Decimal          @db.Decimal(6, 2)
  durationMinutes Int
  suitableFor     RouteAudience[]
  tags            String[]         @default([]) @db.Text
  highlights      String[]         @default([]) @db.Text
  descriptionMarkdown String       @db.Text
  howToGet        String?          @db.Text
  howToReturn     String?          @db.Text
  safetyNotes     String?          @db.Text
  interestingFacts String[]        @default([]) @db.Text
  trackGeoJson    Json?
  pointsOfInterest Json?
  coverImageUrl   String?
  ratingAverage   Decimal?         @db.Decimal(3, 2)
  ratingCount     Int              @default(0)
  isPublished     Boolean          @default(true)
  publishedAt     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([isPublished, createdAt])
  @@index([region, city])
}

