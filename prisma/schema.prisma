// Prisma schema for Маршруты Прогулки
// Provider: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  roles         UserRole[]
  routeRatings  RouteRating[]
  routeComments RouteComment[]
  notifications Notification[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String? @db.Text
  oauth_token        String? @db.Text
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  users UserRole[]
}

model UserRole {
  userId     String
  roleId     Int
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

enum RouteDifficulty {
  EASY
  MODERATE
  CHALLENGING
}

enum RouteAudience {
  WALK
  RUN
  FAMILY
  BIKE
  STROLLER
}

enum RouteStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

model Route {
  id                   String           @id @default(cuid())
  slug                 String           @unique
  title                String
  summary              String
  city                 String
  region               String
  difficulty           RouteDifficulty
  distanceKm           Decimal          @db.Decimal(6, 2)
  durationMinutes      Int
  suitableFor          RouteAudience[]
  tags                 String[]         @default([]) @db.Text
  highlights           String[]         @default([]) @db.Text
  descriptionMarkdown  String           @db.Text
  howToGet             String?          @db.Text
  howToReturn          String?          @db.Text
  safetyNotes          String?          @db.Text
  interestingFacts     String[]         @default([]) @db.Text
  trackGeoJson         Json?
  trackSourceFormat    String?
  trackSourceFilename  String?
  trackUpdatedAt       DateTime?
  pointsOfInterest     Json?
  coverImageUrl        String?
  previewImageUrl      String?
  galleryImageUrls     String[]         @default([]) @db.Text
  ratingAverage        Decimal?         @db.Decimal(3, 2)
  ratingCount          Int              @default(0)
  commentCount         Int              @default(0)
  status               RouteStatus      @default(DRAFT)
  isPublished          Boolean          @default(false)
  publishedAt          DateTime?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  authors              RouteAuthor[]
  ratings              RouteRating[]
  comments             RouteComment[]

  @@index([isPublished, createdAt])
  @@index([status, createdAt])
  @@index([region, city])
}

model RouteAuthor {
  routeId    String
  userId     String
  assignedAt DateTime @default(now())
  route      Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([routeId, userId])
}

enum RouteCommentStatus {
  PENDING
  PUBLISHED
  REJECTED
  HIDDEN
}

enum NotificationType {
  ROUTE_COMMENT
  COMMENT_REPLY
  ROUTE_RATING
  COMMENT_FLAGGED
}

model RouteRating {
  id        String   @id @default(cuid())
  routeId   String
  userId    String
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  route Route @relation(fields: [routeId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([routeId, userId])
  @@index([routeId, value])
}

model RouteComment {
  id        String             @id @default(cuid())
  routeId   String
  authorId  String
  parentId  String?
  content   String             @db.Text
  status    RouteCommentStatus @default(PENDING)
  spamScore Float              @default(0)
  isFlagged Boolean            @default(false)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  route   Route         @relation(fields: [routeId], references: [id], onDelete: Cascade)
  author  User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent  RouteComment? @relation("RouteCommentThread", fields: [parentId], references: [id], onDelete: Cascade)
  replies RouteComment[] @relation("RouteCommentThread")

  @@index([routeId, status, createdAt])
  @@index([authorId, createdAt])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  data      Json
  readAt    DateTime?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, readAt])
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  entity     String?
  entityId   String?
  actorId    String?
  actorEmail String?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  createdAt  DateTime @default(now())

  actor User? @relation(fields: [actorId], references: [id], onDelete: SetNull)

  @@index([entity, entityId])
  @@index([actorId])
  @@index([createdAt])
}

